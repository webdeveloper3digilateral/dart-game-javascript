<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no, maximum-scale=1.0, minimum-scale=1.0">
    <title>Simple JS Darts Demo - Mobile</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            overflow: hidden;
            touch-action: none;
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
        }

        #gameBox {
            position: absolute;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            max-width: 550px;
            max-height: 400px;
            background-image: url(media/beta-brd2.jpg);
            background-size: contain;
            background-repeat: no-repeat;
            background-position: center;
            white-space: nowrap;
            overflow: hidden;
            transform-origin: top left;
        }

        #dart {
            position: absolute;
            visibility: hidden;
            background-image: url(media/dart-flight.gif);
            left: 300px;
            width: 57px;
            height: 400px;
        }

        #scoreA {
            position: absolute;
            left: 29px;
            top: 135px;
            width: 68px;
            height: 155px;
            text-align: center;
            font-size: 15px;
            color: rgb(255, 255, 255);
            font-weight: bold;
            overflow: hidden;
        }

        #power-back {
            position: absolute;
            visibility: hidden;
            left: 510px;
            top: 130px;
            width: 36px;
            height: 150px;
            background-image: url(media/pbar.gif);
            background-position: -36px 0px;
        }

        #power {
            position: absolute;
            visibility: hidden;
            left: 0;
            top: 0;
            width: 36px;
            height: 150px;
            background-image: url(media/pbar.gif);
        }

        #debug {
            width: 300px;
            height: 600px;
            overflow: auto;
        }

        #darts {
            position: absolute;
            top: 288px;
            left: 34px;
            width: 115px;
            height: 108px;
            background-image: url(media/darts.png);
        }

        #handCursor {
            position: absolute;
            top: 350px;
            left: 450px;
            width: 100px;
            height: 114px;
            background-image: url(media/hand-csr.gif);
        }

        #windIndicator {
            position: absolute;
            top: 11px;
            left: 481px;
            width: 58px;
            height: 58px;
        }

        .windCell {
            position: absolute;
            width: 9px;
            height: 9px;
            background-image: url(media/wind.gif);
        }

        /* Mobile touch controls */
        #touchControls {
            position: fixed;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            z-index: 1000;
        }

        #aimButton, #fireButton {
            display: inline-block;
            padding: 15px 30px;
            margin: 0 10px;
            background: rgba(0, 0, 0, 0.7);
            color: white;
            border: 2px solid white;
            border-radius: 10px;
            font-size: 18px;
            font-weight: bold;
            text-align: center;
            cursor: pointer;
            -webkit-tap-highlight-color: transparent;
        }

        #aimButton:active, #fireButton:active {
            background: rgba(255, 255, 255, 0.3);
        }

        #aimButton.active {
            background: rgba(255, 0, 0, 0.7);
        }

        @media screen and (max-width: 600px) {
            #gameBox {
                transform: scale(0.8);
            }
        }

        @media screen and (max-width: 480px) {
            #gameBox {
                transform: scale(0.6);
            }
        }
    </style>
    <script>
        var SHOW_PROGRESS_BAR = 1;
        var WIND_ACTIVE = 1;

        var GAME_XRES = 550;
        var GAME_YRES = 400;

        var HAND_REF_X = 12;

        var BOARD_CENTER_X = 363;
        var BOARD_CENTER_Y = 201;
        var BOARD_RADIUS = 154;

        var OFFSET_POINT_X = 515;
        var OFFSET_POINT_Y = 176;

        var SEGMENT_COUNT = 20;
        var SEGMENT_SIZE = Math.PI / 10.0;

        var SEGMENTS = [10, 21, 77, 90, 141, 154];
        var SEGMENT_NAMES = ["50", "25", "value", "tripple", "value", "double", "out"];

        var angleOffset = Math.round(-Math.atan2(BOARD_CENTER_Y - OFFSET_POINT_Y, BOARD_CENTER_X - OFFSET_POINT_X) * (180.0 / Math.PI) + 180.0);

        var SCORE_VALUES = [6, 13, 4, 18, 1, 20, 5, 12, 9, 14, 11, 8, 16, 7, 19, 3, 17, 2, 15, 10, 6];

        var targetAngle = 0;
        var targetDelta = 0;
        var targetDX = 0;
        var targetDY = 0;

        var segmentIndex = 0;
        var segmentType = 0;
        var segmentAngle = 0;
        var segment = 0;
        var totalScore = 0;

        var DART_REF_X = 34;
        var DART_REF_Y = 66;

        var FLIGHT_ANIM_DELAY = 20;

        var dartCount = 3;
        var ligthOn = 0;

        var CURSOR_LEFT = 193;
        var CURSOR_RIGHT = 530;
        var CURSOR_TOP = 350;
        var CURSOR_BOTTOM = 380;

        var CURSOR_HOR_STEP = 10;
        var CURSOR_VER_STEP = 1;

        var cursor_hor = CURSOR_HOR_STEP;
        var cursor_ver = CURSOR_VER_STEP;

        var CURSOR_TIMER = 50;

        var hand_top = 350;
        var hand_left = 450;

        var cursorTimerId = 0;
        var dartTimerId = 1;

        var firing = 0;
        var aimingMode = false;

        var wind_angle = 0;
        var wind_phase = 0;

        var WIND_CELL_COUNT = 20;
        var WIND_TIMER = 300;

        var wind_cell_x = [WIND_CELL_COUNT];
        var wind_cell_y = [WIND_CELL_COUNT];

        var gameAngle = 0;
        var windStrenght = 0;

        var sprite_cellwidth = 57;
        var sprite_cellheight = 400;
        var sprite_cellnum = 21;
        var animId;

        // Mobile touch support
        var isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);

        function initMobileControls() {
            if (isMobile) {
                // Add touch controls
                var controlsDiv = document.createElement('div');
                controlsDiv.id = 'touchControls';
                controlsDiv.innerHTML = '<button id="aimButton">AIM</button><button id="fireButton">FIRE</button>';
                document.body.appendChild(controlsDiv);

                // Add touch event listeners
                document.getElementById('aimButton').addEventListener('touchstart', function(e) {
                    e.preventDefault();
                    startVerticalCursorMovement();
                });

                document.getElementById('fireButton').addEventListener('touchstart', function(e) {
                    e.preventDefault();
                    stopVerticalCursorMovement();
                });

                // Add tap-to-aim functionality
                document.getElementById('gameBox').addEventListener('touchstart', function(e) {
                    e.preventDefault();
                    if (!aimingMode) {
                        var rect = this.getBoundingClientRect();
                        var scaleX = GAME_XRES / rect.width;
                        var scaleY = GAME_YRES / rect.height;
                        
                        var touch = e.touches[0];
                        var x = (touch.clientX - rect.left) * scaleX;
                        var y = (touch.clientY - rect.top) * scaleY;
                        
                        // Move cursor to touch position
                        hand_left = Math.max(CURSOR_LEFT, Math.min(CURSOR_RIGHT, x - HAND_REF_X));
                        hand_top = Math.max(CURSOR_TOP, Math.min(CURSOR_BOTTOM, y));
                        moveCursor(hand_left, hand_top);
                    }
                });

                // Prevent default touch behaviors
                document.addEventListener('touchmove', function(e) {
                    e.preventDefault();
                }, { passive: false });

                document.addEventListener('touchstart', function(e) {
                    if (e.target.tagName !== 'BUTTON') {
                        e.preventDefault();
                    }
                }, { passive: false });
            }
        }

        // All your existing functions remain the same...
        function initWindIndicator(newAngle) {
            var wi = document.getElementById("windIndicator");

            for (i = 0; i < WIND_CELL_COUNT; i++) {
                var newShadow = document.createElement("div");
                var divIdName = "shadow" + i;
                newShadow.setAttribute("id", divIdName);
                newShadow.setAttribute("class", "windCell");
                wi.appendChild(newShadow);
            }

            for (i = 0; i < WIND_CELL_COUNT; i++) {
                var newCell = document.createElement("div");
                var divIdName = "cell" + i;
                newCell.setAttribute("id", divIdName);
                newCell.setAttribute("class", "windCell");
                wi.appendChild(newCell);
            }

            setWindAngle(newAngle);
            startWindAnimation();
        }

        function setWindAngle(newAngle) {
            wind_angle = newAngle;
            var rad = newAngle * (Math.PI / 180);
            var rad2 = rad - Math.PI;
            var radius = 23;
            var cx = 29;
            var cy = 29;
            var sx = Math.cos(rad2) * radius + cx;
            var sy = Math.sin(rad2) * radius + cy;
            var step = (radius * 2) / WIND_CELL_COUNT;
            var stp = 0;

            for (i = 0; i < WIND_CELL_COUNT; i++) {
                var px = sx + Math.cos(rad) * stp;
                var py = sy + Math.sin(rad) * stp;

                var sh = document.getElementById("shadow" + i);
                sh.style.top = Math.round(py) - 4 + "px";
                sh.style.left = Math.round(px) - 4 + "px";

                var cl = document.getElementById("cell" + i);
                cl.style.top = Math.round(py) - 4 + "px";
                cl.style.left = Math.round(px) - 4 + "px";

                if (WIND_CELL_COUNT - i > windStrenght) {
                    cl.style.backgroundPosition = "-9px 0px";
                } else {
                    cl.style.backgroundPosition = "-36px 0px";
                }
                stp += step;
            }
        }

        function startWindAnimation() {
            setInterval("doWindAnimation()", WIND_TIMER);
        }

        function doWindAnimation() {
            wind_phase++;
            if (wind_phase > 4) wind_phase = 0;

            for (i = 0; i < windStrenght; i++) {
                var state = (wind_phase + i) % 4;
                var offset = -(9 + state * 9);

                var cl = document.getElementById("cell" + (WIND_CELL_COUNT - windStrenght + i));
                cl.style.backgroundPosition = offset + "px 0px";
            }
        }

        function generateAngle() {
            gameAngle = Math.round(360 * Math.random());
            windStrenght = Math.round(15 * Math.random()) + 5;
            setWindAngle(gameAngle);
        }

        function getWindXOffset() {
            var a = gameAngle * (Math.PI / 180) - Math.PI;
            var xo = Math.cos(a) * windStrenght;
            return Math.round(xo);
        }

        function getWindYOffset() {
            var a = gameAngle * (Math.PI / 180) - Math.PI;
            var yo = Math.sin(a) * windStrenght;
            return Math.round(yo);
        }

        function initPowerBar(xpos, ypos) {
            var el = document.getElementById("power-back");
            el.style.visibility = "visible";
            el.style.top = ypos + "px";
            el.style.left = xpos + "px";

            var el2 = document.getElementById("power");
            el2.style.visibility = "visible";
            setPowerBarProgress(0);
        }

        function setPowerBarProgress(val) {
            var el = document.getElementById("power");
            el.style.backgroundPosition = "0px " + -(139 - val) + "px";
            el.style.top = 140 - val + "px";
            el.style.height = 150 - (139 - val) + "px";
        }

        function hidePowerBar() {
            var el = document.getElementById("power-back");
            el.style.visibility = "hidden";
            var el2 = document.getElementById("power");
            el2.style.visibility = "hidden";
        }

        function initCursor() {
            hand_left = CURSOR_LEFT;
            hand_top = CURSOR_TOP;
        }

        function moveCursor(newX, newY) {
            hand_left = newX;
            hand_top = newY;
            var dart = document.getElementById("handCursor");
            dart.style.left = hand_left + "px";
            dart.style.top = hand_top + "px";
        }

        function doHorizontalCursorMovement() {
            hand_left += cursor_hor;

            if (cursor_hor > 0 && hand_left >= CURSOR_RIGHT) {
                hand_left = CURSOR_RIGHT;
                cursor_hor *= -1;
            }

            if (cursor_hor < 0 && hand_left < CURSOR_LEFT) {
                hand_left = CURSOR_LEFT;
                cursor_hor *= -1;
            }

            moveCursor(hand_left, hand_top);
        }

        function doVerticalCursorMovement() {
            hand_top += cursor_ver;

            if (cursor_ver > 0 && hand_top > CURSOR_BOTTOM) {
                hand_top = CURSOR_BOTTOM;
                cursor_ver *= -1;
            }

            if (cursor_ver < 0 && hand_top < CURSOR_TOP) {
                hand_top = CURSOR_TOP;
                cursor_ver *= -1;
            }

            if (SHOW_PROGRESS_BAR == 1) {
                var prog = (hand_top - CURSOR_TOP) * (130 / (CURSOR_BOTTOM - CURSOR_TOP));
                setPowerBarProgress(prog);
            }

            moveCursor(hand_left, hand_top);
        }

        function startHorizontalCursorMovement() {
            initCursor();
            var el = document.getElementById("handCursor");
            el.style.backgroundPosition = "0px 0px";
            cursorTimerId = setInterval("doHorizontalCursorMovement()", CURSOR_TIMER);
        }

        function stopHorizontalCursorMovement() {
            clearInterval(cursorTimerId);
        }

        function startVerticalCursorMovement() {
            if (firing == 0) {
                aimingMode = true;
                stopHorizontalCursorMovement();
                cursorTimerId = setInterval("doVerticalCursorMovement()", CURSOR_TIMER);
                firing = 1;

                if (SHOW_PROGRESS_BAR == 1) {
                    initPowerBar(510, 130);
                }

                // Update button state on mobile
                if (isMobile) {
                    document.getElementById("aimButton").classList.add("active");
                }
            }
        }

        function stopVerticalCursorMovement() {
            firing = 0;
            aimingMode = false;
            clearInterval(cursorTimerId);

            var fireY = 360 - (hand_top - CURSOR_TOP) * ((BOARD_RADIUS * 2 + 20) / 30) - DART_REF_Y;

            if (WIND_ACTIVE == 1) {
                fireDart(hand_left - DART_REF_X + HAND_REF_X + getWindXOffset() * 4, fireY + getWindYOffset() * 4);
            } else {
                fireDart(hand_left - DART_REF_X + HAND_REF_X, fireY);
            }

            initCursor();
            var el = document.getElementById("handCursor");
            el.style.backgroundPosition = "-100px 0px";

            if (SHOW_PROGRESS_BAR == 1) {
                hidePowerBar();
            }

            // Update button state on mobile
            if (isMobile) {
                document.getElementById("aimButton").classList.remove("active");
            }

            setTimeout("startHorizontalCursorMovement()", 500);
        }

        function mouseHandler(evt) {
            if (isMobile) return; // Disable mouse events on mobile

            var node = evt.target ? evt.target : evt.srcElement ? evt.srcElement : null;
            evt = evt ? evt : event ? event : null;

            var xpo = evt.clientX;
            var ypo = evt.clientY;

            var rx = xpo - 350;
            var ry = ypo - 150;

            computeHit(rx, ry);
            generateScore();
            addScoreA(totalScore);
        }

        function fireDart(tarX, tarY) {
            var dart = document.getElementById("dart");
            dart.style.left = tarX + "px";
            dart.style.top = tarY + "px";
            dart.style.visibility = "visible";

            computeHit(tarX + DART_REF_X, tarY + DART_REF_Y);
            generateScore();
            addScoreA(totalScore);

            dartCount--;
            if (dartCount == 0) {
                generateAngle();
                dartCount = 3;
            }
            renderIndicator();
            doFlightAnim(0);
        }

        function generateScore() {
            if (SEGMENT_NAMES[segmentType] == "out") {
                totalScore = 0;
            } else if (SEGMENT_NAMES[segmentType] == "50") {
                totalScore = 50;
            } else {
                if (SEGMENT_NAMES[segmentType] == "25") {
                    totalScore = 25;
                } else {
                    totalScore = SCORE_VALUES[segment];
                    if (SEGMENT_NAMES[segmentType] == "double") totalScore *= 2;
                    if (SEGMENT_NAMES[segmentType] == "tripple") totalScore *= 3;
                }
            }
        }

        function computeHit(xpos, ypos) {
            var dx = BOARD_CENTER_X - xpos;
            var dy = BOARD_CENTER_Y - ypos;
            var angle = Math.atan2(dy, dx);
            var delta = Math.sqrt(dx * dx + dy * dy);

            var sg = 0;
            for (i = 0; i < 6; i++) {
                if (delta > SEGMENTS[i]) sg = i + 1;
            }

            segmentType = sg;
            segmentIndex = Math.round(-angle * (180.0 / Math.PI) + 180.0);
            segment = Math.round(segmentIndex / (360.0 / SEGMENT_COUNT));
        }

        function addScoreA(msg) {
            var ni = document.getElementById("scoreA");
            var newpar = document.createElement("i");
            newpar.innerHTML = "" + msg + "<br>";
            ni.appendChild(newpar);

            var objDiv = document.getElementById("scoreA");
            objDiv.scrollTop = objDiv.scrollHeight;
        }

        function showcell(x, y, id) {
            var el = document.getElementById(id);
            var cx = -(x * sprite_cellwidth);
            var cy = -(y * sprite_cellheight);
            el.style.backgroundPosition = cx + "px " + cy + "px";
        }

        function doFlightAnim(step) {
            dartTimerId = clearTimeout(animId);
            if (step <= 20) {
                showcell(step, 0, "dart");
                dartTimerId = setTimeout("doFlightAnim(" + (step + 1) + ");", FLIGHT_ANIM_DELAY);
            }
        }

        function renderIndicator() {
            var width = dartCount * 35;
            var drt = document.getElementById("darts");
            drt.style.width = width + "px";
        }

        // Responsive scaling function
        function scaleGame() {
            var gameBox = document.getElementById('gameBox');
            var windowWidth = window.innerWidth;
            var windowHeight = window.innerHeight;
            
            var scaleX = windowWidth / GAME_XRES;
            var scaleY = windowHeight / GAME_YRES;
            var scale = Math.min(scaleX, scaleY, 1);
            
            gameBox.style.transform = 'scale(' + scale + ')';
            gameBox.style.transformOrigin = 'top left';
        }

        // Initialize everything
        window.addEventListener('load', function() {
            initMobileControls();
            startHorizontalCursorMovement();
            initPowerBar(10, 10);
            hidePowerBar();
            initWindIndicator(45);
            generateAngle();
            scaleGame();
        });

        window.addEventListener('resize', scaleGame);

        // Prevent zoom on double tap
        var lastTouchEnd = 0;
        document.addEventListener('touchend', function (event) {
            var now = (new Date()).getTime();
            if (now - lastTouchEnd <= 300) {
                event.preventDefault();
            }
            lastTouchEnd = now;
        }, false);
    </script>
</head>

<body onmouseup="mouseHandler(event)" onkeydown="startVerticalCursorMovement()" onkeyup="stopVerticalCursorMovement()">
    <div id="gameBox">
        <div id="windIndicator"></div>
        <div id="darts"></div>
        <div id="power-back" style="visibility: hidden; top: 10px; left: 10px">
            <div id="power" style="visibility: hidden; background-position: 0px -139px; top: 140px; height: 11px;"></div>
        </div>
        <div id="handCursor" style="background-position: 0px 0px; left: 380px; top: 350px"></div>
        <div id="scoreA"></div>
        <div id="dart">&nbsp;</div>
    </div>
</body>
</html>